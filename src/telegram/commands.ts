import {Composer} from "grammy";
import {Scraper, Tweet} from "agent-twitter-client";
import fs from "fs";
import {isErrnoException} from "../utils";

export function createTwitterComposer(scraper: Scraper) {
    const composer = new Composer();

    composer.errorBoundary((err, next) => {
        console.error("–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ twitter:", err);
        next();
    });

    composer.command("start", async (ctx) => {
        await ctx.reply(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Twitter. \n–ò—Å–ø–æ–ª—å–∑—É–π /add_twitter <username> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å username –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
        );
    });

    composer.command("add_twitter", async (ctx) => {
        if (ctx.message?.text) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const fullText = ctx.message.text;

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "add_twitter" –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                const command = "add_twitter";
                const textAfterCommand = fullText.slice(fullText.indexOf(command) + command.length).trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø—É—Å—Ç–æ–π
                if (!textAfterCommand) {
                    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.");
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const data = fs.readFileSync("usernames.json", "utf8");
                const users: string[] = JSON.parse(data);

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π username
                users.push(textAfterCommand);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
                fs.writeFileSync("usernames.json", JSON.stringify(users, null, 4));

                await ctx.reply(`Username ${textAfterCommand} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`);
            } catch (error) {
                // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                if (error instanceof Error && 'code' in error) {
                    const err = error as NodeJS.ErrnoException;
                    if (err.code === "ENOENT") {
                        await fs.promises.writeFile("usernames.json", JSON.stringify([ctx.message.text], null, 4));
                        await ctx.reply(`Username ${ctx.message.text} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`);
                    } else {
                        console.error("–û—à–∏–±–∫–∞:", error);
                        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
                    }
                } else {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö)
                    console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
                    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
                }
            }
        } else {
            await ctx.reply(`Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!`);
        }
    });

    composer.command("remove_twitter", async (ctx) => {
        if (ctx.message?.text) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const fullText = ctx.message.text;

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã "remove_twitter" –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                const command = "remove_twitter";
                const textAfterCommand = fullText.slice(fullText.indexOf(command) + command.length).trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø—É—Å—Ç–æ–π
                if (!textAfterCommand) {
                    await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.");
                    return;
                }

                // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const data = fs.readFileSync("usernames.json", "utf8");
                const users: string[] = JSON.parse(data);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
                if (!users.includes(textAfterCommand)) {
                    await ctx.reply(`Username ${textAfterCommand} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`);
                    return;
                }

                // –£–¥–∞–ª—è–µ–º username
                const newArray: string[] = users.filter(value => value !== textAfterCommand);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
                fs.writeFileSync("usernames.json", JSON.stringify(newArray, null, 4));

                await ctx.reply(`Username ${textAfterCommand} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`);

                console.log(newArray)
            } catch (error) {
                console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
                await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.");
            }
        } else {
            await ctx.reply(`Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!`);
        }
    });

    composer.command("twitters", async (ctx) => {
        try {
            // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            const data = fs.readFileSync("usernames.json", "utf-8");
            const users: string[] = JSON.parse(data);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            let response = "üìã –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Twitter:\n\n";

            if (users.length === 0) {
                response += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üö´\n–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_twitter";
            } else {
                response += users
                    .map((username, index) => `${index + 1}. @${username}`)
                    .join("\n");

                response += `\n\n–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${users.length} ‚úÖ`;
            }

            await ctx.reply(response);

        } catch (error: unknown) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–∞–π–ª–∞
            if (isErrnoException(error) && error.code === "ENOENT") {
                await ctx.reply("–§–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é /add_twitter");
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:", error);

            let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ ‚ö†Ô∏è";
            if (error instanceof Error) {
                errorMessage += `\n${error.message}`;
            }

            await ctx.reply(errorMessage);
        }
    });

    return composer;
}
